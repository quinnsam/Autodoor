#!/usr/bin/python2.7
###############################################################################
# This program automates a door for keyless unlocking                         #
# Developed by: Sam Quinn, Chauncey Yan, Ashley Greenacre, and Chris Harper.  #
# 05/13/2014                                                                  #
###############################################################################

from threading import Thread
from time import gmtime, strftime, sleep
import subprocess
import serial
import os
import RPi.GPIO as GPIO
import clfdb
from Queue import Queue
import signal
import socket
import select
from xml.dom import minidom

###############################################################################
# Signal handler 
###############################################################################
def handler(signum, frame):
    print 'Entered Sighandler'
    # Disconneting from mysql server
    clfdb.db_close()
    ip_watcher.exit()
    sys.exit()

###############################################################################
# Setting Global varibles and environment.
###############################################################################
connected = []
lock_status = 0
night_lock = 0
arduino = serial.Serial('/dev/ttyUSB0', 9600)
queue = Queue()
ips=clfdb.keyip_all()
#------------------------------------------------------------------------------#
signal.signal(signal.SIGHUP, handler)
signal.signal(signal.SIGINT, handler)
signal.signal(signal.SIGQUIT, handler)
#-----------------------------------------------------------------------------#
host = ''   # Sets the host to localhost
port = 5555
backlog = 5
size = 1024
#-----------------------------------------------------------------------------#
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)  # Prevent socket from being left in TIME_WAIT state
server.bind((host, port))
server.listen(backlog)
socket_connected = [server]  # Number of connected sockets

###############################################################################
# Sends a lock request to the door to be locked
#
# Tasks:
# 1.)   Checks the current stored lock position.
# 2.)   Sends a singnal to the arduino to lock the door.
# 3.)   Only locks the door if the door is closed using the magnetic sensor.
#
###############################################################################
def lock():
    global lock_status
    print "\n\n LOCKING -", lock_status, " \n\n"
    arduino.write('1')
    lock_status = 1

###############################################################################
# Sends a unlock request to the door to be unlocked
#
# Tasks:
# 1.)   Checks the current stored lock position.
# 2.)   Sends a singnal to the arduino to unlock the door.
#
###############################################################################
def unlock():
    global lock_status
    print "\n\n UNLOCKING \n\n"
    arduino.write('0')
    lock_status = 0
    
###############################################################################
# Perfomes the inital handshake between the connected socket and itself
#
# Tasks:
# 1.)   Recieve the xml message from the newly connected client
# 2.)   Send handshake back to the client
#
###############################################################################
def handshake(client):
    raw = client.recv(size)
    raw = raw.strip()
    #XML parse message
    xmldoc = minidom.parse(raw)
    itemlist = xmldoc.getElementsByTagName('message')
    host, port = client.getpeername()
    if itemlist[0].attributes['type'].value == 'handshake':
        client.send('<message type=\"handshake\" from=\"earth\"</message>')


###############################################################################
# The main while loop that will continualy monitor for clients and manage
# housekeeping process.
#
# Tasks:
# 1.)   Ping the client list to see which devices are alive or dead.
# 2.)   If a devices is alive and have not been added to the cliet list yet
#       it will unlock the door.
# 3.)   If the alive device is already been established then no action is taken.
# 4.)   After 30 seconds of the door being unlocked it will automatically lock.
# 5.)   When a user is leaving the house the proxsimity sensor will trigger and
#       automatically unlock the door so exiting does not have to be matic.
#
###############################################################################
def pinger(que):
    global connected, ips
    failed = 0
    ip_mon = que.get()
    if ip_mon == '':
        return 1
    print 'IP watcher started for: ', ip_mon
    while True:
        current_time = int(strftime("%H", gmtime()))
        #print 'thread' , ip_mon
        ret = subprocess.call("ping -c 2 -w 2 -n %s" % ip_mon,
                shell=True,
                stdout=open('/dev/null', 'w'),
                stderr=subprocess.STDOUT)

        if ret == 0:
            if ip_mon in connected:
                failed = 0
                continue
            else:
                if ip_mon != '10.0.0.72':
                    connected.append(ip_mon)
                    unlock()
                    sleep(10)
                    lock()
                elif (current_time < 20 and current_time > 8):
                    connected.append(ip_mon)
                    unlock()
                    sleep(10)
                    lock()

        else :
            if ip_mon in connected:
                failed = failed + 1
                if failed > 3:
                    connected.remove(ip_mon)

        clfdb.printname_ip(connected)
        print '[', lock_status,'] %s' % ', '.join(map(str, connected))

###############################################################################
# Monitors the seiral comunication from the Arduino
# Tasks:
# 1.)   Print what is read from the Arduino
#
###############################################################################
def arduino_watcher():
    print 'Arduino watcher has spawned,', os.getpid()
    while True:
        print arduino.readline()

###############################################################################
# The Main function that spawns all other theads and monitors for socket 
# connections.
# Tasks:
# 1.)   Spawns a thread dedicated to pinging only one ip for each ip in the
#       ip list.
# 2.)   Spawns the arduino_monitor thread to monitor serial data
# 3.)   Begins an infinte loop that will handle socket connections
#
###############################################################################
def main():
    for ip in ips:
        if ip != '':
            queue.put(ip)
            print 'IP ADDR', ip
            ip_watcher = Thread(target=pinger, args=(queue,))
            ip_watcher.setDaemon(True)
            ip_watcher.start()
    
    arduino_monitor = Thread(target=arduino_watcher)
    arduino_monitor.setDaemon(True)
    arduino_monitor.start()
    
    while True:
        readable, writeable, error = select.select(socket_connected, [], [])
        for socket in readable:
            if(socket == server):   # New client connected
                new_client, address = server.accept()
                handshake(new_client)
            else:   # Existing client
                data = socket.recv(size)
                data = data.strip()
                data = data.Split('\n')

                for message in data:
                    if message != '':
                        #XML parse message
                        xmldoc = minidom.parse(raw)
                        itemlist = xmldoc.getElementsByTagName('message')
                        request = itemlist[0].attributes['type'].value
                        if (request == 'status'):
                            # Call get status from autodoor.py
                        
                        elif (request == 'lock'):
                            # Send lock signal to autodoor.py
                        elif (request == 'unlock'):
                            # Send unlock signal to autodoor.py
                        else:
                            socket.send('ERROR: unrecognized command', request)
                    else:   # Client left the session
                        socket.close()
                        socket_connected.remove(socket)


if __name__ == "__main__":
    main()
