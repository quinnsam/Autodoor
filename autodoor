#!/usr/bin/python2.7
###############################################################################
# This program automates a door for keyless unlocking                         #
# Developed by: Sam Quinn, Chauncey Yan, Ashley Greenacre, and Chris Harper.  #
# 05/13/2014                                                                  #
###############################################################################

from threading import Thread
from time import sleep
from flask import Flask, jsonify, request
from OpenSSL import SSL
import datetime
import subprocess
import serial
import os
import signal
import helper
import sys
import getopt
import json

###############################################################################
# Signal handler 
###############################################################################
def handler(signum, frame):
    print 'Entered Sighandler'
    print_stats()
    lock()
    sys.exit()

###############################################################################
# Usage 
###############################################################################
def usage():
    print "Autodoor [th][help]"
    print '		-t 			Test mode will not actually comunicate with the door.'
    print '		-h, --help	Print the usage message'

###############################################################################
# Setting Global varibles and environment.
###############################################################################
connected = []
arduino = serial.Serial('/dev/ttyUSB0', 9600)

# Get the config file 
#------------------------------------------------------------------------------#
try:
    with open('/home/door/Autodoor/Autodoor.json') as data_file:
        config = json.load(data_file)
except:
    print 'ERROR: Could not load config file (Autodoor.json)'
    sys.exit(1)
#------------------------------------------------------------------------------#

# Get the IPs for each user
#------------------------------------------------------------------------------#
ips= []
for i in config['users']:
    ips.append(i['ip'])
#------------------------------------------------------------------------------#
signal.signal(signal.SIGHUP, handler)
signal.signal(signal.SIGINT, handler)
signal.signal(signal.SIGQUIT, handler)
#-----------------------------------------------------------------------------#
test_mode = False
lockdown_mode = False
#-----------------------------------------------------------------------------#
# Class object for logging and users.
class Log(object):
    def __init__(self, name=str, ip=str):
        self.mlock = 0
        self.munlock = 0
        self.mstatus = 0
        self.mcalibrate = 0
        self.mcon = 0
        self.mdcon = 0
        self.mname = name
        self.mip = ip
        self.mlockdown = 0
        self.musers = 0

    def users(self):
        self.musers += 1
    def lock(self):
        self.mlock += 1
    def unlock(self):
        self.munlock += 1
    def status(self):
        self.mstatus += 1
    def calibrate(self):
        self.mcalibrate += 1
    def conected(self):
        self.mcon += 1
    def disconected(self):
        self.mdcon += 1
    def lockdown(self):
        self.mlockdown += 1

#-----------------------------------------------------------------------------#
# Create a log dictionary
log = {'term':Log('term',0), 'glob':Log('glob', 0), 'api':Log('api',0)}

###############################################################################
# Prints the statistics from the logging function
###############################################################################
def print_stats():
    # Create a  log file for the session
    global log
    statfile = open('/home/door/logs/statistics.log', 'a')
    p = subprocess.Popen(['tmux', 'list-sessions'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = p.communicate()

    statfile.write("###############################**Locks/Unlocks**###############################\n%s -- %s\n" % (datetime.datetime.now(), out))
    statfile.write("Unlocks: %s\n" % log['glob'].munlock)
    statfile.write("Locks: %s\n" % log['glob'].mlock)
    statfile.write("###################################**Misc.**####################################\n")
    statfile.write("Terminal Unlocks: %s\n" % log['term'].munlock)
    statfile.write("Terminal Locks: %s\n" % log['term'].mlock)
    statfile.write("Terminal Status: %s\n" % log['term'].mstatus)
    statfile.write("Terminal Calibrates: %s\n" % log['term'].mcalibrate)
    statfile.write("Terminal Users: %s\n" % log['term'].musers)
    statfile.write("Terminal Lockdown: %s\n" % log['term'].mlockdown)
    statfile.write("###################################**Users**####################################\n")
    # Prints logging information for each user
    for user, value in log.iteritems():
        if user not in ['glob', 'term']:
            statfile.write("%s: Unlocks: %s\n" % (log[user].mname, log[user].munlock))
            statfile.write("%s: Connects: %s\n" % (log[user].mname, log[user].mcon))
            statfile.write("%s: Disconnects: %s\n" % (log[user].mname, log[user].mdcon))

    statfile.close()


###############################################################################
# Pareses and sets varibles from commandline arguments.
###############################################################################
try:
    opts, args = getopt.getopt(sys.argv[1:], "ht", ["help"])
except getopt.GetoptError as err:
    # print help information and exit:
    print str(err) # will print something like "option -a not recognized"
    usage()
    sys.exit(2)
for o, a in opts:
    if o == "-t":
        test_mode = True
    elif o in ("-h", "--help"):
        usage()
        sys.exit()
    else:
        assert False, "unhandled option"


###############################################################################
# Sends a lock request to the door to be locked
#
# Tasks:
# 1.)   Sends a singnal to the arduino to lock the door.
#
###############################################################################
def lock():
    global log, lockdown_mode, test_mode
    if lockdown_mode:
        print 'Lockdown mode enabled NOT LOCKING'
    elif test_mode:
        print 'Fake: Sent Arduino Lock'
    else:
        arduino.write('1')
        log['glob'].lock()

###############################################################################
# Sends a unlock request to the door to be unlocked
#
# Tasks:
# 1.)   Sends a singnal to the arduino to unlock the door.
#
###############################################################################
def unlock():
    global log, lockdown_mode, test_mode
    if lockdown_mode:
        print 'Lockdown mode enabled NOT LOCKING'
    elif test_mode:
        print 'Fake: Sent Arduino Lock'
    else:
        arduino.write('0')
        log['glob'].unlock()


def status():
    global log, lockdown_mode, test_mode
    if test_mode:
        print 'Fake: Sent Arduino Status'
    else:
        arduino.write('2')
        log['glob'].status()

def calibrate():
    global log, lockdown_mode, test_mode
    if lockdown_mode:
        print 'Lockdown mode enabled NOT CALIBRATING'
    elif test_mode:
        print 'Fake: Sent Arduino Calibrate'
    else:
        arduino.write('3')
        log['glob'].calibrate()

def con_users():
    global log, lockdown_mode, test_mode
    if test_mode:
        print 'Fake: Connected Users'
    else:
        for user in connected: print ip2name(user)
        log['glob'].users()

def lockdown():
    global log, lockdown_mode, test_mode
    if test_mode:
        print 'Fake: Sent Arduino LockDown'
    else:
        if not lockdown_mode:
            print '#####*-LOCKDOWN ENABLED-*#####'
            lockdown_mode = True
            log['glob'].lockdown()
            #arduino.write(console)
        else:
            print '#####*-LOCKDOWN DISABLED-*#####'
            lockdown_mode = False


###############################################################################
# Returns the name of the user given their IP address.  
#
# Tasks:
# 1.)   Rececive IP address
# 2.)   Return the name associated with the IP
#
###############################################################################
def ip2name(ip):
    for i in config['users']:
        if i['ip'] == ip:
            return i['id']
    return "UNKOWN"


def api_server():
    global log
    global connected
    auth = 0

    print 'Starting API server'

    context = SSL.Context(SSL.SSLv23_METHOD)
    cer = os.path.join(os.path.dirname(__file__), 'autodoor.crt')
    key = os.path.join(os.path.dirname(__file__), 'autodoor.key')

    app = Flask(__name__)
    @app.route('/autodoor/zgpWadpooVB3FVpCWa7a/api/', methods=['POST'])
    def api_command():
        if request.headers['content-Type'] == 'application/json':
            data = request.json
            user = data['name']
            ip = data['ip']
            passwd = data['passwd']
            action =data['action']
            auth = helper.auth_user(user, passwd)
            if auth == 1:
                if action == 'unlock':
                    # Unlock the door
                    unlock()
                    # Add user to the log dict if not already
                    if ip not in log:
                        log[ip] = Log(ip2name(ip), ip)
                    # Log that the user unlocked the door
                    log[ip].unlock()
                    # Increment API unlock.
                    log['api'].unlock()
                elif action == 'lock':
                    # lock the door
                    lock()
                    # Add user to the log dict if not already
                    if ip not in log:
                        log[ip] = Log(ip2name(ip), ip)
                    # Log that the user unlocked the door
                    log[ip].lock()
                    # Increment API lock.
                    log['api'].lock()
            return jsonify('{ "User" : "%s", "Action" : "%s", "Auth" : "%s" }' % (user,action,auth))
        else:
            return "415 Unsupported Media Type ;)"

    @app.route('/autodoor/zgpWadpooVB3FVpCWa7a/unlock/', methods=['POST'])
    def api_unlock():
        if request.headers['content-Type'] == 'application/json':
            data = request.json
            user = data['name']
            ip = data['ip']
            passwd = data['passwd']
            #print "User: %s Password: %s" % (user, passwd)
            auth = helper.auth_user(user, passwd)
            if auth == 1:
                # Unlock the door
                unlock()
                # Add user to the log dict if not already
                if ip not in log:
                    log[ip] = Log(ip2name(ip), ip)
                # Log that the user unlocked the door
                log[ip].unlock()
                # Increment API unlock.
                log['api'].unlock()
            return jsonify('{ "User" : "%s", "Action" : "unlock", "Auth" : "%s" }' % (user, auth))
        else:
            return "415 Unsupported Media Type ;)"

    @app.route('/autodoor/zgpWadpooVB3FVpCWa7a/lock/', methods=['POST'])
    def api_lock():
        if request.headers['content-Type'] == 'application/json':
            data = request.json
            user = data['name']
            ip = data['ip']
            passwd = data['passwd']
            #print "User: %s Password: %s" % (user, passwd)
            auth = helper.auth_user(user, passwd)
            if auth == 1:
                # lock the door
                lock()
                # Add user to the log dict if not already
                if ip not in log:
                    log[ip] = Log(ip2name(ip), ip)
                # Log that the user unlocked the door
                log[ip].lock()
                # Increment API lock.
                log['api'].lock()
            return jsonify('{ "User" : "%s", "Action" : "lock", "Auth" : "%s" }' % (user, auth))
        else:
            return "415 Unsupported Media Type ;)"

    @app.route('/autodoor/zgpWadpooVB3FVpCWa7a/connect/', methods=['POST'])
    def api_connect():
        if request.headers['content-Type'] == 'application/json':
            data = request.json
            user = data['name']
            ip = data['ip']
            passwd = data['passwd']
            auth = helper.auth_user(user, passwd)
            if auth == 1 and ip not in connected:
                print 'User: %s Connected at Time: %s' % (ip2name(ip), datetime.datetime.now())
                connected.append(ip)
                # Unlock the door
                if datetime.datetime.now().hour > 7 and datetime.datetime.now().hour < 23:
                    unlock()
                # Add user to the log dict if not already
                if ip not in log:
                    log[ip] = Log(ip2name(ip), ip)
                # Log that the user unlocked the door
                log[ip].conected()
                # Increment API unlock.
                log['api'].unlock()
            return jsonify('{ "User" : "%s", "Action" : "connect", "Auth" : "%s" }' % (user, auth))
        else:
            return "415 Unsupported Media Type ;)"

    @app.route('/autodoor/zgpWadpooVB3FVpCWa7a/disconnect/', methods=['POST'])
    def api_disconnect():
        if request.headers['content-Type'] == 'application/json':
            data = request.json
            user = data['name']
            ip = data['ip']
            passwd = data['passwd']
            auth = helper.auth_user(user, passwd)
            if auth == 1 and ip in connected:
                print 'User: %s Disconnected at Time: %s' % (ip2name(ip), datetime.datetime.now())
                connected.remove(ip)
                # Unlock the door
                # Add user to the log dict if not already
                if ip not in log:
                    log[ip] = Log(ip2name(ip), ip)
                # Log that the user unlocked the door
                log[ip].disconected()
            return jsonify('{ "User" : "%s", "Action" : "disconnect", "Auth" : "%s" }' % (user, auth))
        else:
            return "415 Unsupported Media Type ;)"

    context = (cer, key)
    app.run(host='0.0.0.0', ssl_context=context)
    print 'Exiting API Server'

###############################################################################
# Monitors the seiral comunication from the Arduino
# Tasks:
# 1.)   Print what is read from the Arduino
#
###############################################################################
def arduino_watcher():
    global lockdown_mode
    print 'Arduino watcher has spawned'
    while True:
        read = arduino.readline()
        read = read.strip()
        print read
        if read == 'UNLOCKED':
            #print 'The door is unlocked'
            if lockdown_mode:
                helper.mailer('INTRUDER', 9)
        elif read == 'WARN':
            #print 'The door Has been open for more than 15 Minutes'
            helper.mailer('WARN', 7)
        print '-----------------'
        read = ""

###############################################################################
# Monitors the seiral comunication from the console. 
# Tasks:
# 1.)   Read input from the daemon console screen.
# 2.)	If command is valid send command to the Arduino.
#
###############################################################################
def console_watcher():
    print 'Console monitor has spawned'
    global lockdown_mode, log, connected
    while True:
        console = raw_input()
        console.strip()
        # Unlock 
        if console == '0':
            unlock()
            log['term'].unlock()
        # Lock
        elif console == '1':
            lock()
            log['term'].lock()
        # Status
        elif console == '2':
            status()
            log['term'].status()
        # Calibrate
        elif console == '3':
            calibrate()
            log['term'].calibrate()
        # Connected Users
        elif console == '4':
            con_users()
            log['term'].users()
        # Statistics
        elif console == '5':
            print '----Statistics----'
            print_stats()
        # LockDown    
        elif console == '9':
            log['term'].lockdown()
        else:
            print 'Error: invalid command [0-Unlock, 1-Lock, 2-Status, 3-Calibrate, 4-Connected.Clients, 5-Statistics]', console

    print "Console Monitor Exited", console


###############################################################################
# The Main function that spawns all other theads and monitors for socket 
# connections.
# Tasks:
# 1.)   Create a PID file for the keep alive crontab.
# 2.)	Spawns a thread dedicated to pinging only one ip for each ip in the
#       ip cqdb, calibrator, Arduino monitor, and the console monitor.
# 2.)   Spawns the arduino_monitor thread to monitor serial data
# 3.)   Begins an infinte loop that will handle socket connections
#
###############################################################################
def main():
    # Create a PID file for the keep alive crontab
    pid_file = open('/home/door/Autodoor/run/autodoor.pid', 'w')
    pid = os.getpid()
    print 'PID: ', pid
    pid_file.write("%s" % pid)
    pid_file.close()

    # Spawn Arduino serial monitor
    arduino_monitor = Thread(target=arduino_watcher)
    arduino_monitor.setDaemon(True)
    arduino_monitor.start()

    # Spawn API server
    api = Thread(target=api_server)
    api.setDaemon(True)
    api.start()

    sleep(5)
    calibrate()

    console_watcher()



if __name__ == "__main__":
    main()
